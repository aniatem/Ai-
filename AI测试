//2023/6/26 by艾琳汉化(团队:无尽的四月) 游戏MOD交流群368969530

// 版权声明：

// 版权所有©2018年Android开源项目。保留所有权利。

// 在以下条件满足的情况下，允许以源代码和二进制形式重新分发和使用，无论是否进行修改：

// 1.源代码的再分发必须保留上述版权声明、此条件列表以及以下免责声明。
// 2.以二进制形式重新分发时，必须在文档和/或其他提供的材料中复制上述版权声明、此条件列表以及以下免责声明。

// 该软件由版权持有人和贡献者"按原样"提供，不提供任何明示或暗示的担保，包括但不限于适销性和适用性的暗示性担保。
// 在任何情况下，无论是基于合同、严格责任还是侵权行为的理论，即使提醒可能会发生损坏,
// 版权所有者或贡献者均不对直接、间接、偶然、特殊、附带或后果性损害
// (包括但不限于替代商品或服务的采购、使用、数据或利润损失，或业务中断)承担任何责任

#include <list>
#include <vector>
#include <string.h>
#include <pthread.h>
#include <thread>
#include <cstring>
#include <jni.h>
#include <unistd.h>
#include <fstream>
#include <iostream>
#include <dlfcn.h>
#include "Includes/Logger.h"
#include "Includes/obfuscate.h"
#include "Includes/Utils.h"
#include "KittyMemory/MemoryPatch.h"
#include "Menu/Setup.h"

//在此处定位库
#define targetLibName OBFUSCATE("libFileA.so")

#include "Includes/Macros.h"

bool feature1, feature2, featureHookToggle, Health;
int sliderValue = 1, level = 0;
void *instanceBtn;

//挂钩示例。假设你知道如何写钩子
void (*AddMoneyExample)(void *instance, int amount);

bool (*old_get_BoolExample)(void *instance);
bool get_BoolExample(void *instance) {
    if (instance != NULL && featureHookToggle) {
        return true;
    }
    return old_get_BoolExample(instance);
}

float (*old_get_FloatExample)(void *instance);
float get_FloatExample(void *instance) {
    if (instance != NULL && sliderValue > 1) {
        return (float) sliderValue;
    }
    return old_get_FloatExample(instance);
}

int (*old_Level)(void *instance);
int Level(void *instance) {
    if (instance != NULL && level) {
        return (int) level;
    }
    return old_Level(instance);
}

void (*old_FunctionExample)(void *instance);
void FunctionExample(void *instance) {
    instanceBtn = instance;
    if (instance != NULL) {
        if (Health) {
            *(int *) ((uint64_t) instance + 0x48) = 999;
        }
    }
    return old_FunctionExample(instance);
}

//我们将在新线程中运行我们的 外挂，这样我们的 while 循环就不会阻塞进程主线程
void *hack_thread(void *) {
    LOGI(OBFUSCATE("已创建线程"));

    //检查目标库是否已加载
    do {
        sleep(1);
    } while (!isLibraryLoaded(targetLibName));

    //Anti-lib 重命名
    /*
    do {
        sleep(1);
    } while (!isLibraryLoaded("libYOURNAME.so"));*/

    LOGI(OBFUSCATE("%s 已加载"), (const char *) targetLibName);

#if defined(__aarch64__) //仅为 arm64 lib 编译此代码。不用担心灰色突出显示代码，它仍然有效
    // 钩子示例。如果不使用钩子，请注释掉
    // 宏中的字符串会自动进行模糊处理。无需混淆！
    HOOK("str", FunctionExample, old_FunctionExample);
    HOOK_LIB("libFileB.so", "0x123456", FunctionExample, old_FunctionExample);
    HOOK_NO_ORIG("0x123456", FunctionExample);
    HOOK_LIB_NO_ORIG("libFileC.so", "0x123456", FunctionExample);
    HOOKSYM("__SymbolNameExample", FunctionExample, old_FunctionExample);
    HOOKSYM_LIB("libFileB.so", "__SymbolNameExample", FunctionExample, old_FunctionExample);
    HOOKSYM_NO_ORIG("__SymbolNameExample", FunctionExample);
    HOOKSYM_LIB_NO_ORIG("libFileB.so", "__SymbolNameExample", FunctionExample);

    // 直接修补偏移量。字符串也会自动混淆！
    PATCH("0x20D3A8", "00 00 A0 E3 1E FF 2F E1");
    PATCH_LIB("libFileB.so", "0x20D3A8", "00 00 A0 E3 1E FF 2F E1");

    AddMoneyExample = (void(*)(void *,int))getAbsoluteAddress(targetLibName, 0x123456);

#else //仅为 armv7 lib 编译此代码。

    // 钩子示例。如果不使用钩子，请注释掉
    // 宏中的字符串会自动进行模糊处理。无需混淆！
    HOOK("str", FunctionExample, old_FunctionExample);
    HOOK_LIB("libFileB.so", "0x123456", FunctionExample, old_FunctionExample);
    HOOK_NO_ORIG("0x123456", FunctionExample);
    HOOK_LIB_NO_ORIG("libFileC.so", "0x123456", FunctionExample);
    HOOKSYM("__SymbolNameExample", FunctionExample, old_FunctionExample);
    HOOKSYM_LIB("libFileB.so", "__SymbolNameExample", FunctionExample, old_FunctionExample);
    HOOKSYM_NO_ORIG("__SymbolNameExample", FunctionExample);
    HOOKSYM_LIB_NO_ORIG("libFileB.so", "__SymbolNameExample", FunctionExample);

    // 直接修补偏移量。字符串也会自动混淆！
    PATCH("0x20D3A8", "00 00 A0 E3 1E FF 2F E1");
    PATCH_LIB("libFileB.so", "0x20D3A8", "00 00 A0 E3 1E FF 2F E1");

    //将更改还原为原始更改
    RESTORE("0x20D3A8");
    RESTORE_LIB("libFileB.so", "0x20D3A8");

    AddMoneyExample = (void (*)(void *, int)) getAbsoluteAddress(targetLibName, 0x123456);

    LOGI(OBFUSCATE("Done"));
#endif

    //Anti-leech
    /*if (!iconValid || !initValid || !settingsValid) {
        //功能不好，使其崩溃
        sleep(5);
        int *p = 0;
        *p = 0;
    }*/

    return NULL;
}

// 不要更改或翻译第一个文本，除非你知道你在做什么   (例如:Category_The Category 只能更改Category)
// 分配特征编号是可选的。没有它，它将自动为您计数，从 0 开始
// 分配的特征编号可以像任何数字 1，3，200，10...而是按顺序 0，1，2，3，4，5...
// ButtonLink、Category、RichTextView 和 RichWebView 不计算在内。他们不能分配功能编号
// 如果您添加True_，则默认情况下可以打开切换、按钮打开关闭和复选框。示例：CheckBox_True_The复选框
// 要了解 HTML，请转到此页面： https://www.w3schools.com/

jobjectArray GetFeatureList(JNIEnv *env, jobject context) {
    jobjectArray ret;

    const char *features[] = {
            OBFUSCATE("Category_控件展示(根据自己需求选择控件)"), //不计算
            OBFUSCATE("Toggle_滑动按钮 1"),
            OBFUSCATE(
                    "100_Toggle_True_滑动按钮 2"), //这个分配了功能编号，默认情况下处于打开状态
            OBFUSCATE("110_Toggle_True_滑动按钮 3"), //这个分配了功能编号，默认情况下处于打开状态
            OBFUSCATE("SeekBar_调节数值1 [范围1~100]_1_100"),//只能调节1~100之间的值
            OBFUSCATE("SeekBar_调节数值2 [范围1~5]_1_5"),//只能调节1~5之间的值
            OBFUSCATE("Spinner_展开单选菜单_功能 1,功能 2,功能 3"),//将会展开小菜单 有3个按钮
            OBFUSCATE("Button_普通按钮"),
            OBFUSCATE("ButtonLink_跳转链接按钮_https://www.youtube.com/"), //不计算
            OBFUSCATE("ButtonOnOff_开/关 按钮"),
            OBFUSCATE("CheckBox_复选框"),
            OBFUSCATE("InputValue_输入数值1 [任意数值]"),//任意输入值
            OBFUSCATE("InputValue_1000_输入数值2 [极值1000]"), //最大值1000 如果键入值超过1000则自动为1000
            OBFUSCATE("InputText_输入文本"),
            OBFUSCATE("RadioButton_单选按钮_关,功能 1,功能 2,功能 3"),

            //创建新的折叠
            OBFUSCATE("Collapse_展开菜单1"),
            OBFUSCATE("CollapseAdd_Toggle_功能 1"),
            OBFUSCATE("CollapseAdd_Toggle_功能 2"),
            OBFUSCATE("123_CollapseAdd_Toggle_功能 3"),
            OBFUSCATE("122_CollapseAdd_CheckBox_复选框"),
            OBFUSCATE("CollapseAdd_Button_普通按钮"),

            //再次创建新的折叠
            OBFUSCATE("Collapse_展开菜单2_True"),//默认展开状态 因为传入了true
            OBFUSCATE("CollapseAdd_SeekBar_调节数值_1_100"),
            OBFUSCATE("CollapseAdd_InputValue_输入数值"),

            OBFUSCATE("RichTextView_这是文本视图，不完全是HTML："
                      "<b>粗体</b> <i>斜体</i> <u>下划线</u>"
                      "<br />新的一行 <font color='red'>支持颜色</font>"
                      "<br/><big>更大的文本</big>"),
            OBFUSCATE("RichWebView_<html><head><style>body{color: white;}</style></head><body>"
                      "这是WebView，具有真正的HTML支持！"
                      "<div style=\"background-color: darkblue; text-align: center;\">支持 CSS</div>"
                      "<marquee style=\"color: green; font-weight:bold;\" direction=\"left\" scrollamount=\"5\" behavior=\"scroll\">这是<u>可滚动</u>的文本</marquee>"
                      "</body></html>")
    };

    //现在，您不必每次都手动更新号码;
    int Total_Feature = (sizeof features / sizeof features[0]);
    ret = (jobjectArray)
            env->NewObjectArray(Total_Feature, env->FindClass(OBFUSCATE("java/lang/String")),
                                env->NewStringUTF(""));

    for (int i = 0; i < Total_Feature; i++)
        env->SetObjectArrayElement(ret, i, env->NewStringUTF(features[i]));

    return (ret);
}

void Changes(JNIEnv *env, jclass clazz, jobject obj,
                                        jint featNum, jstring featName, jint value,
                                        jboolean boolean, jstring str) {

    LOGD(OBFUSCATE("Feature name: %d - %s | Value: = %d | Bool: = %d | Text: = %s"), featNum,
         env->GetStringUTFChars(featName, 0), value,
         boolean, str != NULL ? env->GetStringUTFChars(str, 0) : "");

    //注意不要意外移除断裂;

    switch (featNum) {
        case 0:
            // 一种更简单的方法，通过KittyMemory修补十六进制，而无需指定结构和len。空格或没有空格都可以
            // ARMv7 装配示例
            // MOV R0, #0x0 = 00 00 A0 E3
            // BX LR = 1E FF 2F E1
            PATCH_LIB_SWITCH("libil2cpp.so", "0x100000", "00 00 A0 E3 1E FF 2F E1", boolean);
            break;
        case 100:
            //提醒字符串是自动模糊处理的
            //可切换补丁
            PATCH_SWITCH("0x400000", "00 00 A0 E3 1E FF 2F E1", boolean);
            PATCH_LIB_SWITCH("libil2cpp.so", "0x200000", "00 00 A0 E3 1E FF 2F E1", boolean);
            PATCH_SYM_SWITCH("_SymbolExample", "00 00 A0 E3 1E FF 2F E1", boolean);
            PATCH_LIB_SYM_SWITCH("libNativeGame.so", "_SymbolExample", "00 00 A0 E3 1E FF 2F E1", boolean);

            //将修补的偏移量恢复为原始偏移量
            RESTORE("0x400000");
            RESTORE_LIB("libil2cpp.so", "0x400000");
            RESTORE_SYM("_SymbolExample");
            RESTORE_LIB_SYM("libil2cpp.so", "_SymbolExample");
            break;
        case 110:
            break;
        case 1:
            if (value >= 1) {
                sliderValue = value;
            }
            break;
        case 2:
            switch (value) {
                //对于菜鸟
                case 0:
                    RESTORE("0x0");
                    break;
                case 1:
                    PATCH("0x0", "01 00 A0 E3 1E FF 2F E1");
                    break;
                case 2:
                    PATCH("0x0", "02 00 A0 E3 1E FF 2F E1");
                    break;
            }
            break;
        case 3:
            switch (value) {
                case 0:
                    LOGD(OBFUSCATE("Selected item 1"));
                    break;
                case 1:
                    LOGD(OBFUSCATE("Selected item 2"));
                    break;
                case 2:
                    LOGD(OBFUSCATE("Selected item 3"));
                    break;
            }
            break;
        case 4:
            // 由于我们将 instanceBtn 作为一个字段，我们可以从更新钩子函数中调用它
            if (instanceBtn != NULL)
                AddMoneyExample(instanceBtn, 999999);
            // MakeToast(env, obj, OBFUSCATE("Button pressed"), Toast::LENGTH_SHORT);
            break;
        case 5:
            break;
        case 6:
            featureHookToggle = boolean;
            break;
        case 7:
            level = value;
            break;
        case 8:
            break;
        case 9:
            break;
    }
}

__attribute__((constructor))
void lib_main() {
    // 创建一个新线程，这样它就不会阻塞主线程，这意味着游戏不会冻结
    pthread_t ptid;
    pthread_create(&ptid, NULL, hack_thread, NULL);
}

int RegisterMenu(JNIEnv *env) {
    JNINativeMethod methods[] = {
            {OBFUSCATE("Icon"), OBFUSCATE("()Ljava/lang/String;"), reinterpret_cast<void *>(Icon)},
            {OBFUSCATE("IconWebViewData"),  OBFUSCATE("()Ljava/lang/String;"), reinterpret_cast<void *>(IconWebViewData)},
            {OBFUSCATE("IsGameLibLoaded"),  OBFUSCATE("()Z"), reinterpret_cast<void *>(isGameLibLoaded)},
            {OBFUSCATE("Init"),  OBFUSCATE("(Landroid/content/Context;Landroid/widget/TextView;Landroid/widget/TextView;)V"), reinterpret_cast<void *>(Init)},
            {OBFUSCATE("SettingsList"),  OBFUSCATE("()[Ljava/lang/String;"), reinterpret_cast<void *>(SettingsList)},
            {OBFUSCATE("GetFeatureList"),  OBFUSCATE("()[Ljava/lang/String;"), reinterpret_cast<void *>(GetFeatureList)},
    };

    jclass clazz = env->FindClass(OBFUSCATE("com/android/support/Menu"));
    if (!clazz)
        return JNI_ERR;
    if (env->RegisterNatives(clazz, methods, sizeof(methods) / sizeof(methods[0])) != 0)
        return JNI_ERR;
    return JNI_OK;
}

int RegisterPreferences(JNIEnv *env) {
    JNINativeMethod methods[] = {
            {OBFUSCATE("Changes"), OBFUSCATE("(Landroid/content/Context;ILjava/lang/String;IZLjava/lang/String;)V"), reinterpret_cast<void *>(Changes)},
    };
    jclass clazz = env->FindClass(OBFUSCATE("com/android/support/Preferences"));
    if (!clazz)
        return JNI_ERR;
    if (env->RegisterNatives(clazz, methods, sizeof(methods) / sizeof(methods[0])) != 0)
        return JNI_ERR;
    return JNI_OK;
}

int RegisterMain(JNIEnv *env) {
    JNINativeMethod methods[] = {
            {OBFUSCATE("CheckOverlayPermission"), OBFUSCATE("(Landroid/content/Context;)V"), reinterpret_cast<void *>(CheckOverlayPermission)},
    };
    jclass clazz = env->FindClass(OBFUSCATE("com/android/support/Main"));
    if (!clazz)
        return JNI_ERR;
    if (env->RegisterNatives(clazz, methods, sizeof(methods) / sizeof(methods[0])) != 0)
        return JNI_ERR;

    return JNI_OK;
}

extern "C"
JNIEXPORT jint JNICALL
JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv *env;
    vm->GetEnv((void **) &env, JNI_VERSION_1_6);
    if (RegisterMenu(env) != 0)
        return JNI_ERR;
    if (RegisterPreferences(env) != 0)
        return JNI_ERR;
    if (RegisterMain(env) != 0)
        return JNI_ERR;
    return JNI_VERSION_1_6;
}
